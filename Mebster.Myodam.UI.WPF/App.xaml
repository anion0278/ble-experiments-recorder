<Application x:Class="Mebster.Myodam.UI.WPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Mebster.Myodam.UI.WPF"
             xmlns:viewModel="clr-namespace:Mebster.Myodam.UI.WPF.ViewModels"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:views="clr-namespace:Mebster.Myodam.UI.WPF.Views"
             xmlns:resouces="clr-namespace:Mebster.Myodam.UI.WPF.Views.Resouces"
             Startup="Application_Startup"
             Exit="Application_OnExit">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Themes/dark.indigo.xaml" />

                <ResourceDictionary>
                    <!--Implicit MVVM teplates-->
                    <DataTemplate DataType="{x:Type viewModel:TestSubjectDetailViewModel}">
                        <views:testSubjectDetailView/>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type viewModel:MeasurementDetailViewModel}">
                        <views:MeasurementDetailView/>
                    </DataTemplate>
                    <!--Templates end-->

                    <SolidColorBrush x:Key="MebsterColor" Color="#322882"/>

                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="FontSize" Value="12"/>
                        <Setter Property="Width" Value="150"/>
                        <Setter Property="Margin" Value="10"/>
                        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
                    </Style>
                    <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                        <Setter Property="FontSize" Value="12"/>
                    </Style>
                    <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
                        <Setter Property="Foreground" Value="#CCCCCC"/>
                    </Style>

                    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
                    <resouces:InverseBooleanConverter x:Key="inverseBooleanConverter"/>
                    <resouces:CollectionLengthToBooleanConverter x:Key="collectionLengthToBooleanConverter"/>
                    <resouces:IdToBooleanConverter x:Key="idToBooleanConverter"/>

                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Setter Property="FontSize" Value="14"/>
                        <Setter Property="Margin" Value="0 0 0 12"/>
                        <Setter Property="Validation.ErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate>
                                    <StackPanel>
                                        <AdornedElementPlaceholder x:Name="placeholder"/>
                                        <TextBlock FontSize="10" Foreground="OrangeRed" Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)/ErrorContent}"/>
                                    </StackPanel>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="Background" Value="DarkRed"/>
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <Style x:Key="NotesTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Setter Property="TextWrapping" Value="Wrap"/>
                        <Setter Property="AcceptsTab" Value="true"/>
                        <Setter Property="AcceptsReturn" Value="true"/>
                    </Style>

                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
